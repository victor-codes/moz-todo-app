{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Documents\\\\Code\\\\moz-todo-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nconst FILTER_MAP = {\n  All: () => true,\n  active: task => !task.completed,\n  completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILFILTER_NAMESTER_MAP);\n_c = FILTER_NAMES;\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState(\"All\");\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this));\n\n  function addTask(name) {\n    const newTasks = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTasks]);\n  }\n\n  function editTask(id, newName) {\n    const editedTask = tasks.map(task => {\n      if (id === task.id) {\n        return { ...tasks,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTask);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updateTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updateTasks);\n    console.log(tasks[0]);\n  }\n\n  function deleteTask(id) {\n    const remainingTask = tasks.filter(task => id !== task.id);\n    setTasks(remainingTask);\n    console.log(id);\n  }\n\n  const taskList = tasks.map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this));\n  const taskNoun = taskList.length > 1 ? \"tasks\" : \"task\";\n  const taskHeader = `${taskList.length} ${taskNoun} remaining`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: taskHeader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-execption\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XEViG1OucSQptY/dyFJYxL9pby8=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FILTER_NAMES\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/hp/Documents/Code/moz-todo-react/src/App.js"],"names":["React","useState","nanoid","Todo","Form","FilterButton","FILTER_MAP","All","active","task","completed","FILTER_NAMES","Object","keys","FILFILTER_NAMESTER_MAP","App","props","tasks","setTasks","filter","setFilter","filterList","map","name","addTask","newTasks","id","editTask","newName","editedTask","toggleTaskCompleted","updateTasks","console","log","deleteTask","remainingTask","taskList","taskNoun","length","taskHeader"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  active: (task) => !task.completed,\n  completed: (task) => task.completed,\n};\n\nconst FILTER_NAMES = Object.keys(FILFILTER_NAMESTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState(\"All\");\n\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n\n    />\n  ));\n\n  function addTask(name) {\n    const newTasks = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTasks]);\n  }\n\n  function editTask(id, newName) {\n    const editedTask = tasks.map((task) => {\n      if (id === task.id) {\n        return { ...tasks, name: newName };\n      }\n      return task;\n    });\n    setTasks(editedTask);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updateTasks = tasks.map((task) => {\n      if (id === task.id) {\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n\n    setTasks(updateTasks);\n    console.log(tasks[0]);\n  }\n\n  function deleteTask(id) {\n    const remainingTask = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTask);\n    console.log(id);\n  }\n\n  const taskList = tasks.map((task) => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n  const taskNoun = taskList.length > 1 ? \"tasks\" : \"task\";\n  const taskHeader = `${taskList.length} ${taskNoun} remaining`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">{filterList}</div>\n      <h2 id=\"list-heading\">{taskHeader}</h2>\n\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-execption\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}